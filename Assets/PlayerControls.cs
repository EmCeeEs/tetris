//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""5bbdf763-7ac6-41c8-8d8e-597812d5d1fc"",
            ""actions"": [
                {
                    ""name"": ""PlayerRotation"",
                    ""type"": ""Value"",
                    ""id"": ""ca7ac1b4-c6d2-4120-b871-6d69b66378de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerRotationLeft"",
                    ""type"": ""Button"",
                    ""id"": ""f1dd4831-0f66-4bb0-888f-9ca21d4f8d0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerRotationRight"",
                    ""type"": ""Button"",
                    ""id"": ""3d7aeb76-0bd3-4567-a393-fda864f5415e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""130d0b97-b7c6-4421-ab4f-34422f3a2282"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deb45a26-988f-4fb8-8f69-a1d314e7cdd6"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cdfb085-6b00-424f-8ad6-3df65f1afd8f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotationLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9430a224-4733-4d5c-a988-2b1325a218ea"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotationLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7a35b3a-5512-4bf3-b801-9d14c0a05737"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotationRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfc4a775-41c1-4106-a3f8-8dadc7fa300a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerRotationRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_PlayerRotation = m_PlayerMovement.FindAction("PlayerRotation", throwIfNotFound: true);
        m_PlayerMovement_PlayerRotationLeft = m_PlayerMovement.FindAction("PlayerRotationLeft", throwIfNotFound: true);
        m_PlayerMovement_PlayerRotationRight = m_PlayerMovement.FindAction("PlayerRotationRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_PlayerRotation;
    private readonly InputAction m_PlayerMovement_PlayerRotationLeft;
    private readonly InputAction m_PlayerMovement_PlayerRotationRight;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerRotation => m_Wrapper.m_PlayerMovement_PlayerRotation;
        public InputAction @PlayerRotationLeft => m_Wrapper.m_PlayerMovement_PlayerRotationLeft;
        public InputAction @PlayerRotationRight => m_Wrapper.m_PlayerMovement_PlayerRotationRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @PlayerRotation.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPlayerRotation;
                @PlayerRotation.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPlayerRotation;
                @PlayerRotation.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPlayerRotation;
                @PlayerRotationLeft.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPlayerRotationLeft;
                @PlayerRotationLeft.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPlayerRotationLeft;
                @PlayerRotationLeft.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPlayerRotationLeft;
                @PlayerRotationRight.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPlayerRotationRight;
                @PlayerRotationRight.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPlayerRotationRight;
                @PlayerRotationRight.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnPlayerRotationRight;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayerRotation.started += instance.OnPlayerRotation;
                @PlayerRotation.performed += instance.OnPlayerRotation;
                @PlayerRotation.canceled += instance.OnPlayerRotation;
                @PlayerRotationLeft.started += instance.OnPlayerRotationLeft;
                @PlayerRotationLeft.performed += instance.OnPlayerRotationLeft;
                @PlayerRotationLeft.canceled += instance.OnPlayerRotationLeft;
                @PlayerRotationRight.started += instance.OnPlayerRotationRight;
                @PlayerRotationRight.performed += instance.OnPlayerRotationRight;
                @PlayerRotationRight.canceled += instance.OnPlayerRotationRight;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    public interface IPlayerMovementActions
    {
        void OnPlayerRotation(InputAction.CallbackContext context);
        void OnPlayerRotationLeft(InputAction.CallbackContext context);
        void OnPlayerRotationRight(InputAction.CallbackContext context);
    }
}
